@using System.Text.Json;
@using Blazor.GameOfLife.Models

@inject IJSRuntime _jsRuntime;

@code
{
    private const int SpaceForButtons = 30;

    ElementReference _canvasRef;

    private Life? _life;
    private int _cellEdgeAndSpacingLength;
    private double _cellEdgeLength;
    private int _canvasWidth;
    private int _canvasHeight;

    [Parameter]
    public int Columns { get; set; }

    [Parameter]
    public int Rows { get; set; }

    [Parameter]
    public int PixelWidth { get; set; }

    [Parameter]
    public int PixelHeight { get; set; }

    private System.Threading.Timer? timer;

    protected override void OnParametersSet()
    {
        InitData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var mask = new byte[Rows][];
        for (var row = 0; row < Rows; row++)
        {
            mask[row] = new byte[Columns];
            for (var col = 0; col < Columns; col++)
            {
                var currentCell = _life.Cells[row][col];
                mask[row][col] = (byte)currentCell.CurrentState;
            }
        }
        var maskColors = new[] { "grey", "purple" };

        await _jsRuntime.InvokeVoidAsync("renderCellsOnCanvas", _canvasRef, mask, maskColors, _cellEdgeAndSpacingLength, _cellEdgeLength);
    }

    private void InitData()
    {
        _life = new Life(Rows, Columns);

        _life.Toggle(2, 2);
        _life.Toggle(3, 2);
        _life.Toggle(4, 2);
        _life.Toggle(4, 1);
        _life.Toggle(3, 0);

        _life.Toggle(24, 24);
        _life.Toggle(25, 24);
        _life.Toggle(26, 24);
        _life.Toggle(26, 23);
        _life.Toggle(27, 22);
        _life.Toggle(27, 23);
        _life.Toggle(27, 24);

        UpdateCellAndCanvasSize();
    }

    private void InitData(Cell[][] cells)
    {
        _life = new Life(cells);

        UpdateCellAndCanvasSize();
    }

    private void UpdateCellAndCanvasSize()
    {
        _cellEdgeAndSpacingLength = Math.Min(PixelWidth / Columns, (PixelHeight - SpaceForButtons) / Rows);
        _cellEdgeLength = 0.9 * _cellEdgeAndSpacingLength;

        _canvasWidth = _cellEdgeAndSpacingLength * Columns;
        _canvasHeight = _cellEdgeAndSpacingLength * Rows;
    }

    private void OnCanvasClick(double pixelX, double pixelY)
    {
        if (pixelX < 0 || pixelX > _canvasWidth)
        {
            return;
        }
        if (pixelY < 0 || pixelY > _canvasHeight)
        {
            return;
        }

        var clickedRow = (int)((pixelY / _canvasHeight) * Rows);
        var clickedCol = (int)((pixelX / _canvasWidth) * Columns);

        _life?.Toggle(clickedRow, clickedCol);
    }

    private void OnClear()
    {
        InitData();
    }

    private void OnStartClicked()
    {
        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            _life?.Tick();
            StateHasChanged();
        }, new System.Threading.AutoResetEvent(false), 1000, 1000);
    }
}

@if (_life != null)
{
    <div>
        <canvas width="@_canvasWidth"
            height="@_canvasHeight"
            @onclick="@(e => OnCanvasClick(e.OffsetX, e.OffsetY))"
            @ref="@_canvasRef">
        </canvas>
    </div>

    <button @onclick=@(e => OnClear()) class="btn btn-primary">Clear</button>
    <button @onclick=@(e => OnStartClicked()) class="btn btn-primary">Start</button>

    <p>
        By default, the game of life according to Conway has the following rules: - A dead cell with exactly three living neighbors becomes alive. - A live cell with two or three living neighbors stays alive; otherwise it dies.
    </p>
            
}
else
{
    <div>get a Life</div>
}
